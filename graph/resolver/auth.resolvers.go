package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/stadio-app/stadio-backend/graph"
	"github.com/stadio-app/stadio-backend/graph/gmodel"
	oauth2 "google.golang.org/api/oauth2/v2"
)

// SignInGoogle is the resolver for the signInGoogle field.
func (r *queryResolver) SignInGoogle(ctx context.Context, accessToken string) (*gmodel.Auth, error) {
	if accessToken == "" {
		return nil, fmt.Errorf("empty access token")
	}
	res, err := http.Get(fmt.Sprintf("https://www.googleapis.com/oauth2/v2/userinfo?access_token=%s", accessToken))
	if err != nil || res.StatusCode != 200 {
		return nil, fmt.Errorf("invalid access token")
	}
	google_res_raw, err := io.ReadAll(res.Body)
	if err != nil {
		return nil, fmt.Errorf("could not read body")
	}
	var google_user oauth2.Userinfo
	if err := json.Unmarshal(google_res_raw, &google_user); err != nil {
		return nil, fmt.Errorf("could not parse response")
	}

	auth := gmodel.Auth{
		Token: "random token",
		User: &gmodel.User{
			Name:      google_user.Name,
			Email:     google_user.Email,
			Avatar:    &google_user.Picture,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
	}
	return &auth, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
