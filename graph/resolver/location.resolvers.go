package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/cloudinary/cloudinary-go/v2/api/uploader"
	"github.com/stadio-app/stadio-backend/graph/gmodel"
)

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input gmodel.CreateLocation) (*gmodel.Location, error) {
	validation_err := r.AppContext.StructValidator.StructCtx(ctx, input)
	if validation_err != nil {
		return nil, validation_err
	}
	user := r.Service.GetAuthUserFromContext(ctx)
	location, err := r.Service.CreateLocation(ctx, &user, input)
	if err != nil {
		return nil, err
	}

	for i, location_image := range location.LocationImages {
		image_input := input.Images[i]
		upload_params := uploader.UploadParams{
			PublicID: location_image.UploadID,
		}
		_, err := r.Service.GraphImageUpload(ctx, image_input.Image, upload_params)
		if err != nil {
			return nil, fmt.Errorf("failed to upload image %s to CDN", image_input.Image.Filename)
		}
	}
	return &location, nil
}
