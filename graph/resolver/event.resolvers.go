package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	"github.com/stadio-app/stadio-backend/graph"
	"github.com/stadio-app/stadio-backend/graph/gmodel"
	"github.com/stadio-app/stadio-backend/utils"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input gmodel.CreateEvent) (*gmodel.EventShallow, error) {
	event, err := r.Service.CreateEvent(ctx, r.Service.GetAuthUserFromContext(ctx), input)
	return &event, err
}

// AllEvents is the resolver for the allEvents field.
func (r *queryResolver) AllEvents(ctx context.Context, filter gmodel.AllEventsFilter) ([]*gmodel.Event, error) {
	if err := r.Service.StructValidator.StructCtx(ctx, filter); err != nil {
		return nil, err
	}

	events, err := r.Service.FindAllEvents(ctx, filter)
	if err != nil {
		return nil, err
	}
	return utils.PointersOf(events).([]*gmodel.Event), nil
}

// MyEvents is the resolver for the myEvents field.
func (r *queryResolver) MyEvents(ctx context.Context, userID int) ([]*gmodel.Event, error) {
	events, err := r.Service.MyEvents(ctx, int64(userID))
	if err != nil {
		return nil, err
	}
	return utils.PointersOf(events).([]*gmodel.Event), nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
