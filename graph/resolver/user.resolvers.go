package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/stadio-app/stadio-backend/graph/gmodel"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input gmodel.CreateAccountInput) (*gmodel.User, error) {
	validation_err := r.AppContext.StructValidator.StructCtx(ctx, input)
	if validation_err != nil {
		return nil, validation_err
	}

	new_user, _, err := r.Service.CreateInternalUser(ctx, input)
	if err != nil {
		return nil, fmt.Errorf("could not create user. %s", err.Error())
	}
	// TODO: send email verification mail via new_user.Email
	return &new_user, nil
}

// VerifyEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyEmail(ctx context.Context, verificationCode string) (*gmodel.User, error) {
	user, err := r.Service.VerifyUserEmail(ctx, verificationCode)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// ResendEmailVerificationCode is the resolver for the resendEmailVerificationCode field.
func (r *mutationResolver) ResendEmailVerificationCode(ctx context.Context, email string) (bool, error) {
	user, err := r.Service.FindUserByEmail(ctx, email)
	if err != nil {
		return false, fmt.Errorf("no user found with the provided email address")
	}
	email_verification, err := r.Service.ResendEmailVerification(ctx, user)
	if err != nil {
		return false, err
	}
	// TODO: Send email with new verification code
	return email_verification.ID > 0, nil
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, email string, password string) (*gmodel.Auth, error) {
	auth, err := r.Service.LoginInternal(ctx, email, password)
	return &auth, err
}

// GoogleOAuth is the resolver for the googleOAuth field.
func (r *queryResolver) GoogleOAuth(ctx context.Context, accessToken string) (*gmodel.Auth, error) {
	auth, err := r.Service.GoogleAuthentication(ctx, accessToken)
	return &auth, err
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*gmodel.User, error) {
	auth_user := r.Service.GetAuthUserFromContext(ctx)
	return &auth_user, nil
}
