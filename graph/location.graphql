extend type Mutation {
  createLocation(input: CreateLocation!): Location! @isAuthenticated
}

input CreateLocation {
  name: String! @goTag(key: "validate", value: "required")
  description: String
  type: String! @goTag(key: "validate", value: "required")
  address: CreateAddress! @goTag(key: "validate", value: "required")
  schedule: [CreateLocationSchedule!]!
  instances: [CreateLocationInstance!]!
  images: [CreateLocationImage!]!
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

input CreateLocationSchedule {
  day: WeekDay! @goTag(key: "validate", value: "required")
  on: Time
  from: Int @goTag(key: "validate", value: "gte=0,lt=24")
  to: Int @goTag(key: "validate", value: "gte=0,lt=24")
  available: Boolean! @goTag(key: "validate", value: "required")
}

input CreateLocationInstance {
  name: String!
}

input CreateLocationImage {
  image: Upload!
  default: Boolean!
  caption: String
}

type Location {
  id: ID! @goTag(key: "sql", value: "primary_key")
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String
  type: String!
  ownerId: ID
  owner: Owner
  addressId: ID!
  address: Address
  deleted: Boolean!
  status: String!
  createdById: ID
  createdBy: CreatedByUser
  updatedById: ID
  updatedBy: UpdatedByUser
  locationSchedule: [LocationSchedule!]!
  locationInstances: [LocationInstance!]!
  locationImages: [LocationImage!]!
}

type LocationSchedule {
  id: ID! @goTag(key: "sql", value: "primary_key")
  createdAt: Time!
  updatedAt: Time!
  locationId: ID!
  location: Location
  day: WeekDay!
  on: Time
  from: Time
  toDuration: Int
  available: Boolean!
}

type LocationInstance {
  id: ID! @goTag(key: "sql", value: "primary_key")
  name: String
}

type LocationImage {
  id: ID! @goTag(key: "sql", value: "primary_key")
  uploadId: String!
  originalFilename: String!
  contentType: String!
  default: Boolean!
  caption: String
}
