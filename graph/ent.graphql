directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Address implements Node {
  id: ID!
  latitude: Float!
  longitude: Float!
  mapsLink: String!
  fullAddress: String!
  location: Location!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Event implements Node {
  id: ID!
  name: String!
  type: String
  startDate: Time!
  endDate: Time!
  participants: [Participant!]
  location: Location
}
type Location implements Node {
  id: ID!
  name: String!
  type: String!
  address: Address
  reviews: [Review!]
  owner: Owner
  events: [Event!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/stadio-app/go-backend/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
type Owner implements Node {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  fullName: String!
  idURL: String!
  verified: Boolean!
  user: User!
  locations: [Location!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Participant implements Node {
  id: ID!
  nickname: String
  admin: Boolean!
  participates: Boolean!
  skillLevel: String
  user: User
  reviews: [Review!]
  event: Event
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
type Review implements Node {
  id: ID!
  rating: Float!
  message: String!
  location: Location
  participant: Participant
}
type User implements Node {
  id: ID!
  email: String!
  phoneNumber: String
  name: String!
  avatar: String
  birthDate: Time
  bio: String
  active: Boolean!
  createdAt: Time!
  updatedAt: Time!
  owner: Owner
  participants: [Participant!]
}
