//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Addresses = newAddressesTable("public", "addresses", "")

type addressesTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	CreatedAt       postgres.ColumnTimestampz
	UpdatedAt       postgres.ColumnTimestampz
	Latitude        postgres.ColumnFloat
	Longitude       postgres.ColumnFloat
	MapsLink        postgres.ColumnString
	FullAddress     postgres.ColumnString
	LocationAddress postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AddressesTable struct {
	addressesTable

	EXCLUDED addressesTable
}

// AS creates new AddressesTable with assigned alias
func (a AddressesTable) AS(alias string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AddressesTable with assigned schema name
func (a AddressesTable) FromSchema(schemaName string) *AddressesTable {
	return newAddressesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AddressesTable with assigned table prefix
func (a AddressesTable) WithPrefix(prefix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AddressesTable with assigned table suffix
func (a AddressesTable) WithSuffix(suffix string) *AddressesTable {
	return newAddressesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAddressesTable(schemaName, tableName, alias string) *AddressesTable {
	return &AddressesTable{
		addressesTable: newAddressesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAddressesTableImpl("", "excluded", ""),
	}
}

func newAddressesTableImpl(schemaName, tableName, alias string) addressesTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		CreatedAtColumn       = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampzColumn("updated_at")
		LatitudeColumn        = postgres.FloatColumn("latitude")
		LongitudeColumn       = postgres.FloatColumn("longitude")
		MapsLinkColumn        = postgres.StringColumn("maps_link")
		FullAddressColumn     = postgres.StringColumn("full_address")
		LocationAddressColumn = postgres.IntegerColumn("location_address")
		allColumns            = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, LatitudeColumn, LongitudeColumn, MapsLinkColumn, FullAddressColumn, LocationAddressColumn}
		mutableColumns        = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, LatitudeColumn, LongitudeColumn, MapsLinkColumn, FullAddressColumn, LocationAddressColumn}
	)

	return addressesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		Latitude:        LatitudeColumn,
		Longitude:       LongitudeColumn,
		MapsLink:        MapsLinkColumn,
		FullAddress:     FullAddressColumn,
		LocationAddress: LocationAddressColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
