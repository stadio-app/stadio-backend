//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LocationImage = newLocationImageTable("public", "location_image", "")

type locationImageTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	CreatedAt        postgres.ColumnTimestampz
	UpdatedAt        postgres.ColumnTimestampz
	UploadID         postgres.ColumnString
	OriginalFilename postgres.ColumnString
	LocationID       postgres.ColumnInteger
	Caption          postgres.ColumnString
	CreatedBy        postgres.ColumnInteger
	UpdatedBy        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LocationImageTable struct {
	locationImageTable

	EXCLUDED locationImageTable
}

// AS creates new LocationImageTable with assigned alias
func (a LocationImageTable) AS(alias string) *LocationImageTable {
	return newLocationImageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LocationImageTable with assigned schema name
func (a LocationImageTable) FromSchema(schemaName string) *LocationImageTable {
	return newLocationImageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LocationImageTable with assigned table prefix
func (a LocationImageTable) WithPrefix(prefix string) *LocationImageTable {
	return newLocationImageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LocationImageTable with assigned table suffix
func (a LocationImageTable) WithSuffix(suffix string) *LocationImageTable {
	return newLocationImageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLocationImageTable(schemaName, tableName, alias string) *LocationImageTable {
	return &LocationImageTable{
		locationImageTable: newLocationImageTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newLocationImageTableImpl("", "excluded", ""),
	}
}

func newLocationImageTableImpl(schemaName, tableName, alias string) locationImageTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn        = postgres.TimestampzColumn("updated_at")
		UploadIDColumn         = postgres.StringColumn("upload_id")
		OriginalFilenameColumn = postgres.StringColumn("original_filename")
		LocationIDColumn       = postgres.IntegerColumn("location_id")
		CaptionColumn          = postgres.StringColumn("caption")
		CreatedByColumn        = postgres.IntegerColumn("created_by")
		UpdatedByColumn        = postgres.IntegerColumn("updated_by")
		allColumns             = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, UploadIDColumn, OriginalFilenameColumn, LocationIDColumn, CaptionColumn, CreatedByColumn, UpdatedByColumn}
		mutableColumns         = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, UploadIDColumn, OriginalFilenameColumn, LocationIDColumn, CaptionColumn, CreatedByColumn, UpdatedByColumn}
	)

	return locationImageTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,
		UploadID:         UploadIDColumn,
		OriginalFilename: OriginalFilenameColumn,
		LocationID:       LocationIDColumn,
		Caption:          CaptionColumn,
		CreatedBy:        CreatedByColumn,
		UpdatedBy:        UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
