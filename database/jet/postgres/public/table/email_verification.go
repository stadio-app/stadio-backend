//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EmailVerification = newEmailVerificationTable("public", "email_verification", "")

type emailVerificationTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Code      postgres.ColumnString
	UserID    postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmailVerificationTable struct {
	emailVerificationTable

	EXCLUDED emailVerificationTable
}

// AS creates new EmailVerificationTable with assigned alias
func (a EmailVerificationTable) AS(alias string) *EmailVerificationTable {
	return newEmailVerificationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmailVerificationTable with assigned schema name
func (a EmailVerificationTable) FromSchema(schemaName string) *EmailVerificationTable {
	return newEmailVerificationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmailVerificationTable with assigned table prefix
func (a EmailVerificationTable) WithPrefix(prefix string) *EmailVerificationTable {
	return newEmailVerificationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmailVerificationTable with assigned table suffix
func (a EmailVerificationTable) WithSuffix(suffix string) *EmailVerificationTable {
	return newEmailVerificationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmailVerificationTable(schemaName, tableName, alias string) *EmailVerificationTable {
	return &EmailVerificationTable{
		emailVerificationTable: newEmailVerificationTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newEmailVerificationTableImpl("", "excluded", ""),
	}
}

func newEmailVerificationTableImpl(schemaName, tableName, alias string) emailVerificationTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CodeColumn      = postgres.StringColumn("code")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, CodeColumn, UserIDColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{CodeColumn, UserIDColumn, CreatedAtColumn}
	)

	return emailVerificationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Code:      CodeColumn,
		UserID:    UserIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
