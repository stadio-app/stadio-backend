//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Reviews = newReviewsTable("public", "reviews", "")

type reviewsTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnInteger
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz
	Rating             postgres.ColumnFloat
	Message            postgres.ColumnString
	LocationReviews    postgres.ColumnInteger
	ParticipantReviews postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReviewsTable struct {
	reviewsTable

	EXCLUDED reviewsTable
}

// AS creates new ReviewsTable with assigned alias
func (a ReviewsTable) AS(alias string) *ReviewsTable {
	return newReviewsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReviewsTable with assigned schema name
func (a ReviewsTable) FromSchema(schemaName string) *ReviewsTable {
	return newReviewsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReviewsTable with assigned table prefix
func (a ReviewsTable) WithPrefix(prefix string) *ReviewsTable {
	return newReviewsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReviewsTable with assigned table suffix
func (a ReviewsTable) WithSuffix(suffix string) *ReviewsTable {
	return newReviewsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReviewsTable(schemaName, tableName, alias string) *ReviewsTable {
	return &ReviewsTable{
		reviewsTable: newReviewsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newReviewsTableImpl("", "excluded", ""),
	}
}

func newReviewsTableImpl(schemaName, tableName, alias string) reviewsTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		RatingColumn             = postgres.FloatColumn("rating")
		MessageColumn            = postgres.StringColumn("message")
		LocationReviewsColumn    = postgres.IntegerColumn("location_reviews")
		ParticipantReviewsColumn = postgres.IntegerColumn("participant_reviews")
		allColumns               = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, RatingColumn, MessageColumn, LocationReviewsColumn, ParticipantReviewsColumn}
		mutableColumns           = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, RatingColumn, MessageColumn, LocationReviewsColumn, ParticipantReviewsColumn}
	)

	return reviewsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		Rating:             RatingColumn,
		Message:            MessageColumn,
		LocationReviews:    LocationReviewsColumn,
		ParticipantReviews: ParticipantReviewsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
