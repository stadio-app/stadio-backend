//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Owners = newOwnersTable("public", "owners", "")

type ownersTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz
	FirstName  postgres.ColumnString
	MiddleName postgres.ColumnString
	LastName   postgres.ColumnString
	FullName   postgres.ColumnString
	IDURL      postgres.ColumnString
	Verified   postgres.ColumnBool
	UserOwner  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OwnersTable struct {
	ownersTable

	EXCLUDED ownersTable
}

// AS creates new OwnersTable with assigned alias
func (a OwnersTable) AS(alias string) *OwnersTable {
	return newOwnersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OwnersTable with assigned schema name
func (a OwnersTable) FromSchema(schemaName string) *OwnersTable {
	return newOwnersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OwnersTable with assigned table prefix
func (a OwnersTable) WithPrefix(prefix string) *OwnersTable {
	return newOwnersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OwnersTable with assigned table suffix
func (a OwnersTable) WithSuffix(suffix string) *OwnersTable {
	return newOwnersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOwnersTable(schemaName, tableName, alias string) *OwnersTable {
	return &OwnersTable{
		ownersTable: newOwnersTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newOwnersTableImpl("", "excluded", ""),
	}
}

func newOwnersTableImpl(schemaName, tableName, alias string) ownersTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		FirstNameColumn  = postgres.StringColumn("first_name")
		MiddleNameColumn = postgres.StringColumn("middle_name")
		LastNameColumn   = postgres.StringColumn("last_name")
		FullNameColumn   = postgres.StringColumn("full_name")
		IDURLColumn      = postgres.StringColumn("id_url")
		VerifiedColumn   = postgres.BoolColumn("verified")
		UserOwnerColumn  = postgres.IntegerColumn("user_owner")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, FirstNameColumn, MiddleNameColumn, LastNameColumn, FullNameColumn, IDURLColumn, VerifiedColumn, UserOwnerColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, FirstNameColumn, MiddleNameColumn, LastNameColumn, FullNameColumn, IDURLColumn, VerifiedColumn, UserOwnerColumn}
	)

	return ownersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		FirstName:  FirstNameColumn,
		MiddleName: MiddleNameColumn,
		LastName:   LastNameColumn,
		FullName:   FullNameColumn,
		IDURL:      IDURLColumn,
		Verified:   VerifiedColumn,
		UserOwner:  UserOwnerColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
