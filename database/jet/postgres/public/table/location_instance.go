//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LocationInstance = newLocationInstanceTable("public", "location_instance", "")

type locationInstanceTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz
	LocationID postgres.ColumnInteger
	Name       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LocationInstanceTable struct {
	locationInstanceTable

	EXCLUDED locationInstanceTable
}

// AS creates new LocationInstanceTable with assigned alias
func (a LocationInstanceTable) AS(alias string) *LocationInstanceTable {
	return newLocationInstanceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LocationInstanceTable with assigned schema name
func (a LocationInstanceTable) FromSchema(schemaName string) *LocationInstanceTable {
	return newLocationInstanceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LocationInstanceTable with assigned table prefix
func (a LocationInstanceTable) WithPrefix(prefix string) *LocationInstanceTable {
	return newLocationInstanceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LocationInstanceTable with assigned table suffix
func (a LocationInstanceTable) WithSuffix(suffix string) *LocationInstanceTable {
	return newLocationInstanceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLocationInstanceTable(schemaName, tableName, alias string) *LocationInstanceTable {
	return &LocationInstanceTable{
		locationInstanceTable: newLocationInstanceTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newLocationInstanceTableImpl("", "excluded", ""),
	}
}

func newLocationInstanceTableImpl(schemaName, tableName, alias string) locationInstanceTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		LocationIDColumn = postgres.IntegerColumn("location_id")
		NameColumn       = postgres.StringColumn("name")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, LocationIDColumn, NameColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, LocationIDColumn, NameColumn}
	)

	return locationInstanceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		LocationID: LocationIDColumn,
		Name:       NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
