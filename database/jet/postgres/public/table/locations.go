//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Locations = newLocationsTable("public", "locations", "")

type locationsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	Name           postgres.ColumnString
	Type           postgres.ColumnString
	OwnerLocations postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LocationsTable struct {
	locationsTable

	EXCLUDED locationsTable
}

// AS creates new LocationsTable with assigned alias
func (a LocationsTable) AS(alias string) *LocationsTable {
	return newLocationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LocationsTable with assigned schema name
func (a LocationsTable) FromSchema(schemaName string) *LocationsTable {
	return newLocationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LocationsTable with assigned table prefix
func (a LocationsTable) WithPrefix(prefix string) *LocationsTable {
	return newLocationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LocationsTable with assigned table suffix
func (a LocationsTable) WithSuffix(suffix string) *LocationsTable {
	return newLocationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLocationsTable(schemaName, tableName, alias string) *LocationsTable {
	return &LocationsTable{
		locationsTable: newLocationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newLocationsTableImpl("", "excluded", ""),
	}
}

func newLocationsTableImpl(schemaName, tableName, alias string) locationsTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		NameColumn           = postgres.StringColumn("name")
		TypeColumn           = postgres.StringColumn("type")
		OwnerLocationsColumn = postgres.IntegerColumn("owner_locations")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, TypeColumn, OwnerLocationsColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, TypeColumn, OwnerLocationsColumn}
	)

	return locationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Name:           NameColumn,
		Type:           TypeColumn,
		OwnerLocations: OwnerLocationsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
