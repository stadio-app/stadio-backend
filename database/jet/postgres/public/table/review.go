//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Review = newReviewTable("public", "review", "")

type reviewTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz
	Rating        postgres.ColumnFloat
	Message       postgres.ColumnString
	LocationID    postgres.ColumnInteger
	EventID       postgres.ColumnInteger
	ParticipantID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReviewTable struct {
	reviewTable

	EXCLUDED reviewTable
}

// AS creates new ReviewTable with assigned alias
func (a ReviewTable) AS(alias string) *ReviewTable {
	return newReviewTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReviewTable with assigned schema name
func (a ReviewTable) FromSchema(schemaName string) *ReviewTable {
	return newReviewTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReviewTable with assigned table prefix
func (a ReviewTable) WithPrefix(prefix string) *ReviewTable {
	return newReviewTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReviewTable with assigned table suffix
func (a ReviewTable) WithSuffix(suffix string) *ReviewTable {
	return newReviewTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReviewTable(schemaName, tableName, alias string) *ReviewTable {
	return &ReviewTable{
		reviewTable: newReviewTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newReviewTableImpl("", "excluded", ""),
	}
}

func newReviewTableImpl(schemaName, tableName, alias string) reviewTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		RatingColumn        = postgres.FloatColumn("rating")
		MessageColumn       = postgres.StringColumn("message")
		LocationIDColumn    = postgres.IntegerColumn("location_id")
		EventIDColumn       = postgres.IntegerColumn("event_id")
		ParticipantIDColumn = postgres.IntegerColumn("participant_id")
		allColumns          = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, RatingColumn, MessageColumn, LocationIDColumn, EventIDColumn, ParticipantIDColumn}
		mutableColumns      = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, RatingColumn, MessageColumn, LocationIDColumn, EventIDColumn, ParticipantIDColumn}
	)

	return reviewTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		Rating:        RatingColumn,
		Message:       MessageColumn,
		LocationID:    LocationIDColumn,
		EventID:       EventIDColumn,
		ParticipantID: ParticipantIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
