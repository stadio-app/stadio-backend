//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Event = newEventTable("public", "event", "")

type eventTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Type        postgres.ColumnString
	StartDate   postgres.ColumnTimestampz
	EndDate     postgres.ColumnTimestampz
	LocationID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EventTable struct {
	eventTable

	EXCLUDED eventTable
}

// AS creates new EventTable with assigned alias
func (a EventTable) AS(alias string) *EventTable {
	return newEventTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EventTable with assigned schema name
func (a EventTable) FromSchema(schemaName string) *EventTable {
	return newEventTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EventTable with assigned table prefix
func (a EventTable) WithPrefix(prefix string) *EventTable {
	return newEventTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EventTable with assigned table suffix
func (a EventTable) WithSuffix(suffix string) *EventTable {
	return newEventTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEventTable(schemaName, tableName, alias string) *EventTable {
	return &EventTable{
		eventTable: newEventTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newEventTableImpl("", "excluded", ""),
	}
}

func newEventTableImpl(schemaName, tableName, alias string) eventTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		TypeColumn        = postgres.StringColumn("type")
		StartDateColumn   = postgres.TimestampzColumn("start_date")
		EndDateColumn     = postgres.TimestampzColumn("end_date")
		LocationIDColumn  = postgres.IntegerColumn("location_id")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, DescriptionColumn, TypeColumn, StartDateColumn, EndDateColumn, LocationIDColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, DescriptionColumn, TypeColumn, StartDateColumn, EndDateColumn, LocationIDColumn}
	)

	return eventTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Type:        TypeColumn,
		StartDate:   StartDateColumn,
		EndDate:     EndDateColumn,
		LocationID:  LocationIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
