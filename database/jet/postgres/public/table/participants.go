//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Participants = newParticipantsTable("public", "participants", "")

type participantsTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestampz
	UpdatedAt         postgres.ColumnTimestampz
	Nickname          postgres.ColumnString
	Admin             postgres.ColumnBool
	Participates      postgres.ColumnBool
	SkillLevel        postgres.ColumnString
	EventParticipants postgres.ColumnInteger
	UserParticipants  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ParticipantsTable struct {
	participantsTable

	EXCLUDED participantsTable
}

// AS creates new ParticipantsTable with assigned alias
func (a ParticipantsTable) AS(alias string) *ParticipantsTable {
	return newParticipantsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ParticipantsTable with assigned schema name
func (a ParticipantsTable) FromSchema(schemaName string) *ParticipantsTable {
	return newParticipantsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ParticipantsTable with assigned table prefix
func (a ParticipantsTable) WithPrefix(prefix string) *ParticipantsTable {
	return newParticipantsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ParticipantsTable with assigned table suffix
func (a ParticipantsTable) WithSuffix(suffix string) *ParticipantsTable {
	return newParticipantsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newParticipantsTable(schemaName, tableName, alias string) *ParticipantsTable {
	return &ParticipantsTable{
		participantsTable: newParticipantsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newParticipantsTableImpl("", "excluded", ""),
	}
}

func newParticipantsTableImpl(schemaName, tableName, alias string) participantsTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampzColumn("updated_at")
		NicknameColumn          = postgres.StringColumn("nickname")
		AdminColumn             = postgres.BoolColumn("admin")
		ParticipatesColumn      = postgres.BoolColumn("participates")
		SkillLevelColumn        = postgres.StringColumn("skill_level")
		EventParticipantsColumn = postgres.IntegerColumn("event_participants")
		UserParticipantsColumn  = postgres.IntegerColumn("user_participants")
		allColumns              = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, NicknameColumn, AdminColumn, ParticipatesColumn, SkillLevelColumn, EventParticipantsColumn, UserParticipantsColumn}
		mutableColumns          = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NicknameColumn, AdminColumn, ParticipatesColumn, SkillLevelColumn, EventParticipantsColumn, UserParticipantsColumn}
	)

	return participantsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		Nickname:          NicknameColumn,
		Admin:             AdminColumn,
		Participates:      ParticipatesColumn,
		SkillLevel:        SkillLevelColumn,
		EventParticipants: EventParticipantsColumn,
		UserParticipants:  UserParticipantsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
