//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthState = newAuthStateTable("public", "auth_state", "")

type authStateTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	LoggedInAt postgres.ColumnTimestampz
	UserID     postgres.ColumnInteger
	IPAddress  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AuthStateTable struct {
	authStateTable

	EXCLUDED authStateTable
}

// AS creates new AuthStateTable with assigned alias
func (a AuthStateTable) AS(alias string) *AuthStateTable {
	return newAuthStateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthStateTable with assigned schema name
func (a AuthStateTable) FromSchema(schemaName string) *AuthStateTable {
	return newAuthStateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthStateTable with assigned table prefix
func (a AuthStateTable) WithPrefix(prefix string) *AuthStateTable {
	return newAuthStateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthStateTable with assigned table suffix
func (a AuthStateTable) WithSuffix(suffix string) *AuthStateTable {
	return newAuthStateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthStateTable(schemaName, tableName, alias string) *AuthStateTable {
	return &AuthStateTable{
		authStateTable: newAuthStateTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAuthStateTableImpl("", "excluded", ""),
	}
}

func newAuthStateTableImpl(schemaName, tableName, alias string) authStateTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		LoggedInAtColumn = postgres.TimestampzColumn("logged_in_at")
		UserIDColumn     = postgres.IntegerColumn("user_id")
		IPAddressColumn  = postgres.StringColumn("ip_address")
		allColumns       = postgres.ColumnList{IDColumn, LoggedInAtColumn, UserIDColumn, IPAddressColumn}
		mutableColumns   = postgres.ColumnList{LoggedInAtColumn, UserIDColumn, IPAddressColumn}
	)

	return authStateTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		LoggedInAt: LoggedInAtColumn,
		UserID:     UserIDColumn,
		IPAddress:  IPAddressColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
