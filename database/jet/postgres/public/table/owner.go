//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Owner = newOwnerTable("public", "owner", "")

type ownerTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz
	FirstName  postgres.ColumnString
	MiddleName postgres.ColumnString
	LastName   postgres.ColumnString
	FullName   postgres.ColumnString
	Verified   postgres.ColumnBool
	UserID     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OwnerTable struct {
	ownerTable

	EXCLUDED ownerTable
}

// AS creates new OwnerTable with assigned alias
func (a OwnerTable) AS(alias string) *OwnerTable {
	return newOwnerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OwnerTable with assigned schema name
func (a OwnerTable) FromSchema(schemaName string) *OwnerTable {
	return newOwnerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OwnerTable with assigned table prefix
func (a OwnerTable) WithPrefix(prefix string) *OwnerTable {
	return newOwnerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OwnerTable with assigned table suffix
func (a OwnerTable) WithSuffix(suffix string) *OwnerTable {
	return newOwnerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOwnerTable(schemaName, tableName, alias string) *OwnerTable {
	return &OwnerTable{
		ownerTable: newOwnerTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newOwnerTableImpl("", "excluded", ""),
	}
}

func newOwnerTableImpl(schemaName, tableName, alias string) ownerTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		FirstNameColumn  = postgres.StringColumn("first_name")
		MiddleNameColumn = postgres.StringColumn("middle_name")
		LastNameColumn   = postgres.StringColumn("last_name")
		FullNameColumn   = postgres.StringColumn("full_name")
		VerifiedColumn   = postgres.BoolColumn("verified")
		UserIDColumn     = postgres.IntegerColumn("user_id")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, FirstNameColumn, MiddleNameColumn, LastNameColumn, FullNameColumn, VerifiedColumn, UserIDColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, FirstNameColumn, MiddleNameColumn, LastNameColumn, FullNameColumn, VerifiedColumn, UserIDColumn}
	)

	return ownerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		FirstName:  FirstNameColumn,
		MiddleName: MiddleNameColumn,
		LastName:   LastNameColumn,
		FullName:   FullNameColumn,
		Verified:   VerifiedColumn,
		UserID:     UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
