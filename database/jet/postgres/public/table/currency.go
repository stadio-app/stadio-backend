//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Currency = newCurrencyTable("public", "currency", "")

type currencyTable struct {
	postgres.Table

	// Columns
	CurrencyCode postgres.ColumnString
	Name         postgres.ColumnString
	Symbol       postgres.ColumnString
	SymbolNative postgres.ColumnString
	Decimals     postgres.ColumnInteger
	NumToBasic   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CurrencyTable struct {
	currencyTable

	EXCLUDED currencyTable
}

// AS creates new CurrencyTable with assigned alias
func (a CurrencyTable) AS(alias string) *CurrencyTable {
	return newCurrencyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CurrencyTable with assigned schema name
func (a CurrencyTable) FromSchema(schemaName string) *CurrencyTable {
	return newCurrencyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CurrencyTable with assigned table prefix
func (a CurrencyTable) WithPrefix(prefix string) *CurrencyTable {
	return newCurrencyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CurrencyTable with assigned table suffix
func (a CurrencyTable) WithSuffix(suffix string) *CurrencyTable {
	return newCurrencyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCurrencyTable(schemaName, tableName, alias string) *CurrencyTable {
	return &CurrencyTable{
		currencyTable: newCurrencyTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCurrencyTableImpl("", "excluded", ""),
	}
}

func newCurrencyTableImpl(schemaName, tableName, alias string) currencyTable {
	var (
		CurrencyCodeColumn = postgres.StringColumn("currency_code")
		NameColumn         = postgres.StringColumn("name")
		SymbolColumn       = postgres.StringColumn("symbol")
		SymbolNativeColumn = postgres.StringColumn("symbol_native")
		DecimalsColumn     = postgres.IntegerColumn("decimals")
		NumToBasicColumn   = postgres.IntegerColumn("num_to_basic")
		allColumns         = postgres.ColumnList{CurrencyCodeColumn, NameColumn, SymbolColumn, SymbolNativeColumn, DecimalsColumn, NumToBasicColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, SymbolColumn, SymbolNativeColumn, DecimalsColumn, NumToBasicColumn}
	)

	return currencyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CurrencyCode: CurrencyCodeColumn,
		Name:         NameColumn,
		Symbol:       SymbolColumn,
		SymbolNative: SymbolNativeColumn,
		Decimals:     DecimalsColumn,
		NumToBasic:   NumToBasicColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
