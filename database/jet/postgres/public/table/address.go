//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Address = newAddressTable("public", "address", "")

type addressTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	Latitude    postgres.ColumnFloat
	Longitude   postgres.ColumnFloat
	MapsLink    postgres.ColumnString
	FullAddress postgres.ColumnString
	CountryCode postgres.ColumnString
	Country     postgres.ColumnString
	CreatedBy   postgres.ColumnInteger
	UpdatedBy   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AddressTable struct {
	addressTable

	EXCLUDED addressTable
}

// AS creates new AddressTable with assigned alias
func (a AddressTable) AS(alias string) *AddressTable {
	return newAddressTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AddressTable with assigned schema name
func (a AddressTable) FromSchema(schemaName string) *AddressTable {
	return newAddressTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AddressTable with assigned table prefix
func (a AddressTable) WithPrefix(prefix string) *AddressTable {
	return newAddressTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AddressTable with assigned table suffix
func (a AddressTable) WithSuffix(suffix string) *AddressTable {
	return newAddressTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAddressTable(schemaName, tableName, alias string) *AddressTable {
	return &AddressTable{
		addressTable: newAddressTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAddressTableImpl("", "excluded", ""),
	}
}

func newAddressTableImpl(schemaName, tableName, alias string) addressTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		LatitudeColumn    = postgres.FloatColumn("latitude")
		LongitudeColumn   = postgres.FloatColumn("longitude")
		MapsLinkColumn    = postgres.StringColumn("maps_link")
		FullAddressColumn = postgres.StringColumn("full_address")
		CountryCodeColumn = postgres.StringColumn("country_code")
		CountryColumn     = postgres.StringColumn("country")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		UpdatedByColumn   = postgres.IntegerColumn("updated_by")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, LatitudeColumn, LongitudeColumn, MapsLinkColumn, FullAddressColumn, CountryCodeColumn, CountryColumn, CreatedByColumn, UpdatedByColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, LatitudeColumn, LongitudeColumn, MapsLinkColumn, FullAddressColumn, CountryCodeColumn, CountryColumn, CreatedByColumn, UpdatedByColumn}
	)

	return addressTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Latitude:    LatitudeColumn,
		Longitude:   LongitudeColumn,
		MapsLink:    MapsLinkColumn,
		FullAddress: FullAddressColumn,
		CountryCode: CountryCodeColumn,
		Country:     CountryColumn,
		CreatedBy:   CreatedByColumn,
		UpdatedBy:   UpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
