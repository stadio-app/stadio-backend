//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Participant = newParticipantTable("public", "participant", "")

type participantTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	Nickname     postgres.ColumnString
	Admin        postgres.ColumnBool
	Participates postgres.ColumnBool
	SkillLevel   postgres.ColumnString
	EventID      postgres.ColumnInteger
	UserID       postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ParticipantTable struct {
	participantTable

	EXCLUDED participantTable
}

// AS creates new ParticipantTable with assigned alias
func (a ParticipantTable) AS(alias string) *ParticipantTable {
	return newParticipantTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ParticipantTable with assigned schema name
func (a ParticipantTable) FromSchema(schemaName string) *ParticipantTable {
	return newParticipantTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ParticipantTable with assigned table prefix
func (a ParticipantTable) WithPrefix(prefix string) *ParticipantTable {
	return newParticipantTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ParticipantTable with assigned table suffix
func (a ParticipantTable) WithSuffix(suffix string) *ParticipantTable {
	return newParticipantTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newParticipantTable(schemaName, tableName, alias string) *ParticipantTable {
	return &ParticipantTable{
		participantTable: newParticipantTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newParticipantTableImpl("", "excluded", ""),
	}
}

func newParticipantTableImpl(schemaName, tableName, alias string) participantTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		NicknameColumn     = postgres.StringColumn("nickname")
		AdminColumn        = postgres.BoolColumn("admin")
		ParticipatesColumn = postgres.BoolColumn("participates")
		SkillLevelColumn   = postgres.StringColumn("skill_level")
		EventIDColumn      = postgres.IntegerColumn("event_id")
		UserIDColumn       = postgres.IntegerColumn("user_id")
		allColumns         = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, NicknameColumn, AdminColumn, ParticipatesColumn, SkillLevelColumn, EventIDColumn, UserIDColumn}
		mutableColumns     = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NicknameColumn, AdminColumn, ParticipatesColumn, SkillLevelColumn, EventIDColumn, UserIDColumn}
	)

	return participantTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		Nickname:     NicknameColumn,
		Admin:        AdminColumn,
		Participates: ParticipatesColumn,
		SkillLevel:   SkillLevelColumn,
		EventID:      EventIDColumn,
		UserID:       UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
